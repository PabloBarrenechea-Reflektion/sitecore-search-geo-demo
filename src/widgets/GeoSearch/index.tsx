// This component was generated by @sitecore-search/cli on Mon Sep 09 2024 13:15:58 GMT+0200 (Central European Summer Time)

import { MagnifyingGlassIcon } from "@radix-ui/react-icons";
import { debounce } from "@sitecore-search/common";
import {
  FilterAnd,
  FilterGeo,
  FilterOr,
  SearchResultsInitialState,
  SearchResultsStoreState,
} from "@sitecore-search/react";
import {
  WidgetDataType,
  useSearchResults,
  widget,
} from "@sitecore-search/react";

import ArticleCard from "../components/ArticleCard";
import QueryResultsSummary from "../components/QueryResultsSummary";
import ResultsPerPage from "../components/ResultsPerPage";
import SearchPagination from "../components/SearchPagination";
import Spinner from "../components/Spinner";
import GeoFilters from "../components/GeoFilters";
import { useState } from "react";

type ArticleModel = {
  id: string;
  type?: string;
  title?: string;
  name?: string;
  subtitle?: string;
  url?: string;
  description?: string;
  content_text?: string;
  image_url?: string;
  contact_email?: string;
  contact_phone?: string;
  office_address?: string;
};
type ArticleSearchResultsProps = {
  defaultPage?: SearchResultsStoreState["page"];
  defaultItemsPerPage?: SearchResultsStoreState["itemsPerPage"];
  defaultKeyphrase?: SearchResultsStoreState["keyphrase"];
  defaultLat?: number;
  defaultLon?: number;
  defaultDistance?: string;
};
type InitialState = SearchResultsInitialState<
  "itemsPerPage" | "keyphrase" | "page"
>;

export const GeoSearchComponent = ({
  defaultPage = 1,
  defaultKeyphrase = "",
  defaultItemsPerPage = 24,
  defaultLat = -20.145177,
  defaultLon = -44.8878139,
  defaultDistance = "3000km",
}: ArticleSearchResultsProps) => {
  const [geoValues, setGeoValues] = useState([
    { distance: defaultDistance, lon: defaultLon, lat: defaultLat },
  ]);

  const [filterType, setFilterType] = useState("or");

  const geoChangeHandler = (event: any, name: string, index: number) => {
    setGeoValues((prev) => {
      const copy = [...prev];
      copy[index] = { ...prev[index], [name]: event.target.value };
      return copy;
    });
  };

  const switchFilterType = () => {
    setFilterType(filterType === "or" ? "and" : "or");
  };

  const addCoordinateHandler = () => {
    setGeoValues((prev) => [
      ...prev,
      { distance: defaultDistance, lat: defaultLat, lon: defaultLon },
    ]);
  };

  const removeHandler = (indexToRemove: number) => {
    setGeoValues((prev) => prev.filter((_, index) => index !== indexToRemove));
  };

  const refreshGeo = () => {
    const geoFilters = geoValues.map(
      (geoValue) =>
        new FilterGeo("location", geoValue.distance, {
          lat: geoValue.lat,
          lon: geoValue.lon,
        }),
    );
    const newFilter =
      filterType === "or"
        ? new FilterOr(geoFilters)
        : new FilterAnd(geoFilters);
    query.getRequest().resetSearchFilter().setSearchFilter(newFilter);
  };

  const {
    widgetRef,
    query,
    actions: { onItemClick, onKeyphraseChange },
    state: { page, itemsPerPage },
    queryResult: {
      isLoading,
      isFetching,
      data: { total_item: totalItems = 0, content: articles = [] } = {},
    },
  } = useSearchResults<ArticleModel, InitialState>({
    state: {
      page: defaultPage,
      itemsPerPage: defaultItemsPerPage,
      keyphrase: defaultKeyphrase,
    },
    query: (query) => {
      query
        .getRequest()
        .resetSearchFilter()
        .setSearchFilter(
          new FilterGeo("location", defaultDistance, {
            lat: defaultLat,
            lon: defaultLon,
          }),
        );
    },
  });

  const totalPages = Math.ceil(totalItems / itemsPerPage);
  const keyphraseChangeFn = debounce((e) => {
    onKeyphraseChange({ keyphrase: e.target.value });
  }, 200);

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen w-full bg-white dark:bg-gray-800">
        <Spinner loading />
      </div>
    );
  }
  return (
    <div ref={widgetRef}>
      <div className="relative block w-[50%] mx-auto my-4">
        <input
          onChange={(e) => keyphraseChangeFn(e)}
          className="peer border rounded w-full p-2 pr-[25px] focus:outline-gray-700 dark:bg-gray-700 dark:text-gray-100"
        />
        <MagnifyingGlassIcon className="absolute right-[5px] top-[10px] w-[20px] h-[20px] text-gray-400 peer-focus:text-gray-500" />
      </div>
      <div className="flex items-center gap-1">
        <button className="btn" onClick={addCoordinateHandler}>
          Add coordinate
        </button>
        <button className="btn" onClick={switchFilterType}>
          Switch to "{filterType === "or" ? "and" : "or"}"
        </button>
        <button className="btn" onClick={refreshGeo}>
          Refresh
        </button>
      </div>
      <GeoFilters
        geoValues={geoValues}
        geoChangeHandler={geoChangeHandler}
        removeHandler={removeHandler}
      />

      <div className="flex relative max-w-full px-4 text-black dark:text-gray-100 text-opacity-75">
        {isFetching && (
          <div className="w-full h-full fixed top-0 left-0 bottom-0 right-0 z-30 bg-white opacity-50">
            <div className="absolute top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%] flex flex-col justify-center items-center z-40">
              <Spinner loading />
            </div>
          </div>
        )}
        {totalItems > 0 && (
          <>
            <section className="flex flex-col flex-[4_1_0%]">
              {/* Sort Select */}
              <section className="flex justify-between text-xs">
                {totalItems > 0 && (
                  <QueryResultsSummary
                    currentPage={page}
                    itemsPerPage={itemsPerPage}
                    totalItems={totalItems}
                    totalItemsReturned={articles.length}
                  />
                )}
              </section>

              {/* Results */}
              <div className="w-full">
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-x-3 md:gap-x-5 xl:gap-x-6 gap-y-3 ">
                  {articles.map((a, index) => (
                    <ArticleCard
                      key={a.id}
                      article={a as ArticleModel}
                      index={index}
                      onItemClick={onItemClick}
                    />
                  ))}
                </div>
              </div>
              <div className="flex flex-col md:flex-row md:justify-between text-xs">
                <ResultsPerPage defaultItemsPerPage={defaultItemsPerPage} />
                <SearchPagination currentPage={page} totalPages={totalPages} />
              </div>
            </section>
          </>
        )}
        {totalItems <= 0 && !isFetching && (
          <div className="w-full flex justify-center">
            <h3>0 Results</h3>
          </div>
        )}
      </div>
    </div>
  );
};
const GeoSearchWidget = widget(
  GeoSearchComponent,
  WidgetDataType.SEARCH_RESULTS,
  "content",
);
export default GeoSearchWidget;
